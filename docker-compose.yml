version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: life-story-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: life_story
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secretpassword}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - life-story-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js приложение
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: life-story-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Server
      PORT: 3000
      NODE_ENV: production

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: life_story
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-secretpassword}

      # Authentication
      PRIVATE_KEY: ${PRIVATE_KEY:-your_secret_private_key_here}
      SALT_ROUNDS: 10

      # CORS
      ALLOWED_ORIGINS: https://shimmering-brioche-73195a.netlify.app,http://localhost:9009

      # Rate Limiting
      RATE_LIMIT_WINDOW: 60000
      RATE_LIMIT_MAX: 100

      # File Upload
      MAX_FILE_SIZE_MB: 10
      UPLOAD_PATH: ./uploads

      # Logging
      LOG_LEVEL: info
      LOG_DIR: ./logs
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "3003:3003"
    networks:
      - life-story-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: life-story-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./uploads:/usr/share/nginx/html/uploads:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    networks:
      - life-story-network

  # Certbot для получения SSL сертификатов
  certbot:
    image: certbot/certbot
    container_name: life-story-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ayan.d3v@gmail.com -d cond.13lab.tech --agree-tos
    depends_on:
      - nginx

# Volumes
volumes:
  postgres_data:
    driver: local

# Networks
networks:
  life-story-network:
    driver: bridge